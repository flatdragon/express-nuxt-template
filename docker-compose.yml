version: "3.9"

services:

  proxy:
    image: traefik
    restart: unless-stopped
    command: |
      --api.insecure=${TRAEFIK_API_INSECURE:-false} 
      --providers.docker=true
      --providers.docker.exposedbydefault=false
      --entrypoints.web.address=:80
      --entrypoints.secured-web.address=:443
      --certificatesresolvers.webresolver.acme.httpchallenge=${TLS_ENABLED:-false}
      --certificatesresolvers.webresolver.acme.httpchallenge.entrypoint=web
      --certificatesresolvers.webresolver.acme.email=${ACME_EMAIL}
      --certificatesresolvers.webresolver.acme.storage=/letsencrypt/acme.json
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - ./letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    profiles:
      - production
      - development

  api:
    build:
      context: ./docker/services/api
    restart: unless-stopped
    environment:
      ENV: ${ENV}
      HOST: ${API_HOST:-0.0.0.0}
      PORT: ${API_PORT:-2000}
    ports:
      - ${API_PORT:-2000}
    volumes:
      - ./api:/app
      - /app/node_modules
      - ./docker/scripts:/scripts
    profiles:
      - production
      - development

  frontend:
    build:
      context: ./docker/services/frontend
    restart: unless-stopped
    environment:
      ENV: ${ENV}
      HOST: ${FRONTEND_HOST:-0.0.0.0}
      PORT: ${FRONTEND_PORT:-3000}
      VIRTUAL_HOST: ${FRONTEND_VIRTUAL_HOST}
      CHOKIDAR_USEPOLLING: 1
    ports:
      - ${FRONTEND_PORT:-3000}
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${FRONTEND_VIRTUAL_HOST:-localhost}`)
      - traefik.http.routers.frontend.entrypoints=web
      - traefik.http.routers.frontend-secured.rule=Host(`${FRONTEND_VIRTUAL_HOST:-localhost}`)
      - traefik.http.routers.frontend-secured.entrypoints=secured-web
      - traefik.http.routers.frontend-secured.tls=${TLS_ENABLED:-false}
      - traefik.http.routers.frontend-secured.tls.certresolver=webresolver
    deploy:
      replicas: ${FRONTEND_REPLICAS:-1}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.nuxt
      - ./docker/scripts:/scripts
    profiles:
      - production
      - development

  webhook:
    build:
      context: ./docker/services/webhook
    restart: unless-stopped
    environment:
      ENV: ${ENV}
      HOST: ${WEBHOOK_HOST:-0.0.0.0}
      PORT: ${WEBHOOK_PORT:-4000}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
    ports:
      - ${WEBHOOK_PORT:-4000}
    labels:
      - traefik.enable=true
      - traefik.http.routers.webhook.rule=Host(`${WEBHOOK_VIRTUAL_HOST:-webhook.localhost}`)
      - traefik.http.routers.webhook.entrypoints=web
      - traefik.http.routers.webhook-secured.rule=Host(`${WEBHOOK_VIRTUAL_HOST:-localhost}`)
      - traefik.http.routers.webhook-secured.entrypoints=secured-web
      - traefik.http.routers.webhook-secured.tls=${TLS_ENABLED:-false}
      - traefik.http.routers.webhook-secured.tls.certresolver=webresolver
    volumes:
      - ./webhook:/app
      - /app/node_modules
      - ./docker/scripts:/scripts
    profiles:
      - production
      - development

  mongo:
    image: mongo
    restart: unless-stopped
    ports:
      - 27017:27017
    volumes:
      - ${MONGO_DATA_LOCAL_PATH:-./data/mongodb/db}:/data/db
    profiles:
      - production
      - development

  frontend-tunnel:
    build:
      context: ./docker/services/tunnel
    command: lt --subdomain ${FRONTEND_TUNNEL_SUBDOMAIN} --local-host frontend --port ${FRONTEND_PORT:-3000}
    profiles: []

  webhook-tunnel:
    build:
      context: ./docker/services/tunnel
    command: lt --subdomain ${WEBHOOK_TUNNEL_SUBDOMAIN} --local-host webhook --port ${WEBHOOK_PORT:-4000}
    profiles: []
